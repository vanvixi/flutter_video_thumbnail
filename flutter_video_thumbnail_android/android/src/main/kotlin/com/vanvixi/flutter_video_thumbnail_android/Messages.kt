// ignore_for_file: constant_identifier_names
// 
// Autogenerated from Pigeon (v15.0.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.vanvixi.flutter_video_thumbnail_android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  if (exception is VideoThumbnailError) {
    return listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    return listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class VideoThumbnailError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

/** Generated class from Pigeon that represents data sent in messages. */
data class GetThumbnailDataMessage (
  val videoPath: String,
  val videoDurationMs: Long? = null,
  val timeMs: Long,
  val width: Long,
  val height: Long,
  val quality: Long,
  val quantity: Long,
  val formatIndex: Long,
  val headers: Map<String?, String?>,
  val receiveId: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): GetThumbnailDataMessage {
      val videoPath = list[0] as String
      val videoDurationMs = list[1].let { if (it is Int) it.toLong() else it as Long? }
      val timeMs = list[2].let { if (it is Int) it.toLong() else it as Long }
      val width = list[3].let { if (it is Int) it.toLong() else it as Long }
      val height = list[4].let { if (it is Int) it.toLong() else it as Long }
      val quality = list[5].let { if (it is Int) it.toLong() else it as Long }
      val quantity = list[6].let { if (it is Int) it.toLong() else it as Long }
      val formatIndex = list[7].let { if (it is Int) it.toLong() else it as Long }
      val headers = list[8] as Map<String?, String?>
      val receiveId = list[9] as String?
      return GetThumbnailDataMessage(videoPath, videoDurationMs, timeMs, width, height, quality, quantity, formatIndex, headers, receiveId)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      videoPath,
      videoDurationMs,
      timeMs,
      width,
      height,
      quality,
      quantity,
      formatIndex,
      headers,
      receiveId,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class ThumbnailMessage (
  val thumbnailData: ByteArray? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): ThumbnailMessage {
      val thumbnailData = list[0] as ByteArray?
      return ThumbnailMessage(thumbnailData)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      thumbnailData,
    )
  }
}
@Suppress("UNCHECKED_CAST")
private object VideoThumbnailApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GetThumbnailDataMessage.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          ThumbnailMessage.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is GetThumbnailDataMessage -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is ThumbnailMessage -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface VideoThumbnailApi {
  fun dispose()
  fun getThumbnailDataAsync(msg: GetThumbnailDataMessage): ThumbnailMessage
  fun getThumbnailData(msg: GetThumbnailDataMessage)

  companion object {
    /** The codec used by VideoThumbnailApi. */
    val codec: MessageCodec<Any?> by lazy {
      VideoThumbnailApiCodec
    }
    /** Sets up an instance of `VideoThumbnailApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: VideoThumbnailApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_video_thumbnail_android.VideoThumbnailApi.dispose", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            var wrapped: List<Any?>
            try {
              api.dispose()
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_video_thumbnail_android.VideoThumbnailApi.getThumbnailDataAsync", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val msgArg = args[0] as GetThumbnailDataMessage
            var wrapped: List<Any?>
            try {
              wrapped = listOf<Any?>(api.getThumbnailDataAsync(msgArg))
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_video_thumbnail_android.VideoThumbnailApi.getThumbnailData", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val msgArg = args[0] as GetThumbnailDataMessage
            var wrapped: List<Any?>
            try {
              api.getThumbnailData(msgArg)
              wrapped = listOf<Any?>(null)
            } catch (exception: Throwable) {
              wrapped = wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
